package main

import (
	"fmt"
	crypt "github.com/mtps/protoc-gen-cryptids/crypt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"os"
	"strings"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

var typeEString = (&crypt.EString{}).ProtoReflect().Descriptor()

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	fmt.Fprintf(os.Stderr, "generating for %s\n", file.Desc.Path())
	javaPackage := *file.Proto.Options.JavaPackage
	javaDirectory := strings.ReplaceAll(javaPackage, ".", "/")
	filename := javaDirectory + "/" + string(file.Desc.Name()) + "_crypt.pb.kt"

	fmt.Fprintf(os.Stderr, "javaDir:%s  javaPkg:%s filename:%s  goimportpath:%s\n", javaDirectory, javaPackage, filename, file.GoImportPath)
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-cryptids")
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", javaPackage)
	g.P()
	for _, message := range file.Messages {
		for _, field := range message.Fields {
			// Handle EStrings
			if field.Desc.Kind() == protoreflect.MessageKind {
				fieldTypeName := field.Desc.Message().FullName()
				if fieldTypeName == typeEString.FullName() {
					fmt.Fprintf(os.Stderr, "detected encrypted string field %s\n", field.Desc.FullName())
					g.P("fun ", message.Desc.Name(), ".enc", field.Desc.Name(), "(provider: () -> Unit): ByteArray =")
					g.P("    provider.invoke(it.value.toByteArray()))")
					g.P()
				}
			}
		}
	}
	return g
}
